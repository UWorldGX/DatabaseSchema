// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace FirewallDemo.Model.Data;

public partial class xpertContext : DbContext
{
    public xpertContext(DbContextOptions<xpertContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ChatList> ChatLists { get; set; }

    public virtual DbSet<Item> Items { get; set; }

    public virtual DbSet<Message> Messages { get; set; }

    public virtual DbSet<Sale> Sales { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserPrivkey> UserPrivkeys { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_0900_ai_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<ChatList>(entity =>
        {
            entity.HasKey(e => e.ChatId).HasName("PRIMARY");

            entity
                .ToTable("chat_lists")
                .UseCollation("utf8mb4_zh_0900_as_cs");

            entity.HasIndex(e => e.CustomerId, "F_chats_to_users_customers");

            entity.HasIndex(e => e.SellerId, "F_chats_to_users_sellers");

            entity.Property(e => e.ChatId)
                .HasMaxLength(128)
                .HasColumnName("chat_id");
            entity.Property(e => e.CustomerId)
                .IsRequired()
                .HasMaxLength(32)
                .HasColumnName("customer_id");
            entity.Property(e => e.SellerId)
                .IsRequired()
                .HasMaxLength(32)
                .HasColumnName("seller_id");

            entity.HasOne(d => d.Customer).WithMany(p => p.ChatListCustomers)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("F_chats_to_users_customers");

            entity.HasOne(d => d.Seller).WithMany(p => p.ChatListSellers)
                .HasForeignKey(d => d.SellerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("F_chats_to_users_sellers");
        });

        modelBuilder.Entity<Item>(entity =>
        {
            entity.HasKey(e => e.ItemId).HasName("PRIMARY");

            entity
                .ToTable("items")
                .UseCollation("utf8mb4_zh_0900_as_cs");

            entity.HasIndex(e => e.SellerId, "F_items_to_user_sellers");

            entity.HasIndex(e => e.Type, "I_type");

            entity.Property(e => e.ItemId)
                .HasMaxLength(32)
                .HasColumnName("item_id");
            entity.Property(e => e.DelistingTimestamp)
                .HasColumnType("datetime")
                .HasColumnName("delisting_timestamp");
            entity.Property(e => e.ItemName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("item_name");
            entity.Property(e => e.ItemStatus)
                .IsRequired()
                .HasMaxLength(8)
                .HasColumnName("item_status");
            entity.Property(e => e.ListingTimestamp)
                .HasColumnType("datetime")
                .HasColumnName("listing_timestamp");
            entity.Property(e => e.Picture)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("picture");
            entity.Property(e => e.SellPrice)
                .HasPrecision(10, 2)
                .HasColumnName("sell_price");
            entity.Property(e => e.SellerId)
                .IsRequired()
                .HasMaxLength(32)
                .HasColumnName("seller_id");
            entity.Property(e => e.Summary)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("summary");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(8)
                .HasColumnName("type");

            entity.HasOne(d => d.Seller).WithMany(p => p.Items)
                .HasForeignKey(d => d.SellerId)
                .HasConstraintName("F_items_to_user_sellers");
        });

        modelBuilder.Entity<Message>(entity =>
        {
            entity.HasKey(e => e.MsgId).HasName("PRIMARY");

            entity
                .ToTable("messages")
                .UseCollation("utf8mb4_zh_0900_as_cs");

            entity.HasIndex(e => e.ChatId, "F_msg_to_chat_id");

            entity.HasIndex(e => e.SenderId, "F_msg_to_sender");

            entity.Property(e => e.MsgId)
                .HasMaxLength(32)
                .HasColumnName("msg_id");
            entity.Property(e => e.ChatId)
                .IsRequired()
                .HasMaxLength(128)
                .HasColumnName("chat_id");
            entity.Property(e => e.Content)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("content");
            entity.Property(e => e.SenderId)
                .IsRequired()
                .HasMaxLength(32)
                .HasColumnName("sender_id");
            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
            entity.Property(e => e.Unread).HasColumnName("unread");

            entity.HasOne(d => d.Chat).WithMany(p => p.Messages)
                .HasForeignKey(d => d.ChatId)
                .HasConstraintName("F_msg_to_chat_id");

            entity.HasOne(d => d.Sender).WithMany(p => p.Messages)
                .HasForeignKey(d => d.SenderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("F_msg_to_sender");
        });

        modelBuilder.Entity<Sale>(entity =>
        {
            entity.HasKey(e => e.SaleId).HasName("PRIMARY");

            entity
                .ToTable("sales")
                .UseCollation("utf8mb4_zh_0900_as_cs");

            entity.HasIndex(e => e.ItemId, "F_sales_to_items");

            entity.HasIndex(e => e.CustomerId, "F_sales_to_user_customers");

            entity.HasIndex(e => e.SellerId, "F_sales_to_user_sellers");

            entity.Property(e => e.SaleId)
                .HasMaxLength(128)
                .HasColumnName("sale_id");
            entity.Property(e => e.CustomerId)
                .IsRequired()
                .HasMaxLength(32)
                .HasColumnName("customer_id");
            entity.Property(e => e.ItemId)
                .IsRequired()
                .HasMaxLength(32)
                .HasColumnName("item_id");
            entity.Property(e => e.RealPrice)
                .HasPrecision(10, 2)
                .HasColumnName("real_price");
            entity.Property(e => e.SellerId)
                .IsRequired()
                .HasMaxLength(32)
                .HasColumnName("seller_id");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(16)
                .HasColumnName("status");
            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("timestamp");

            entity.HasOne(d => d.Customer).WithMany(p => p.SaleCustomers)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("F_sales_to_user_customers");

            entity.HasOne(d => d.Item).WithMany(p => p.Sales)
                .HasForeignKey(d => d.ItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("F_sales_to_items");

            entity.HasOne(d => d.Seller).WithMany(p => p.SaleSellers)
                .HasForeignKey(d => d.SellerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("F_sales_to_user_sellers");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user")
                .UseCollation("utf8mb4_zh_0900_as_cs");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .HasColumnName("id");
            entity.Property(e => e.Age).HasColumnName("age");
            entity.Property(e => e.Money).HasColumnName("money");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(32)
                .HasColumnName("name");
            entity.Property(e => e.Nickname)
                .IsRequired()
                .HasMaxLength(128)
                .HasColumnName("nickname");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("password");
            entity.Property(e => e.PublicKey)
                .IsRequired()
                .HasMaxLength(1024)
                .HasColumnName("public_key");
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(5)
                .HasColumnName("role");
            entity.Property(e => e.Sex)
                .IsRequired()
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("sex");
        });

        modelBuilder.Entity<UserPrivkey>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PRIMARY");

            entity
                .ToTable("user_privkey")
                .UseCollation("utf8mb4_zh_0900_as_cs");

            entity.Property(e => e.UserId)
                .HasMaxLength(32)
                .HasColumnName("user_id");
            entity.Property(e => e.PrivateKey)
                .IsRequired()
                .HasMaxLength(1024)
                .HasColumnName("private_key");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}